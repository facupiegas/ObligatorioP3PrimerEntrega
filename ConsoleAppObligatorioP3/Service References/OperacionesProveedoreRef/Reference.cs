//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleAppObligatorioP3.OperacionesProveedoreRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OperacionesProveedoreRef.IOperacionesProveedores")]
    public interface IOperacionesProveedores {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperacionesProveedores/RetornarProveedores", ReplyAction="http://tempuri.org/IOperacionesProveedores/RetornarProveedoresResponse")]
        ServiciosObligatorioWCF.DTOProveedor[] RetornarProveedores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperacionesProveedores/RetornarProveedores", ReplyAction="http://tempuri.org/IOperacionesProveedores/RetornarProveedoresResponse")]
        System.Threading.Tasks.Task<ServiciosObligatorioWCF.DTOProveedor[]> RetornarProveedoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperacionesProveedores/RetornarProveedorPorRut", ReplyAction="http://tempuri.org/IOperacionesProveedores/RetornarProveedorPorRutResponse")]
        ServiciosObligatorioWCF.DTOProveedor RetornarProveedorPorRut(string unRut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperacionesProveedores/RetornarProveedorPorRut", ReplyAction="http://tempuri.org/IOperacionesProveedores/RetornarProveedorPorRutResponse")]
        System.Threading.Tasks.Task<ServiciosObligatorioWCF.DTOProveedor> RetornarProveedorPorRutAsync(string unRut);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperacionesProveedores/ModificarArancelesProveedor", ReplyAction="http://tempuri.org/IOperacionesProveedores/ModificarArancelesProveedorResponse")]
        bool ModificarArancelesProveedor(double unArancel, double unPorcentajeVip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperacionesProveedores/ModificarArancelesProveedor", ReplyAction="http://tempuri.org/IOperacionesProveedores/ModificarArancelesProveedorResponse")]
        System.Threading.Tasks.Task<bool> ModificarArancelesProveedorAsync(double unArancel, double unPorcentajeVip);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOperacionesProveedoresChannel : ConsoleAppObligatorioP3.OperacionesProveedoreRef.IOperacionesProveedores, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperacionesProveedoresClient : System.ServiceModel.ClientBase<ConsoleAppObligatorioP3.OperacionesProveedoreRef.IOperacionesProveedores>, ConsoleAppObligatorioP3.OperacionesProveedoreRef.IOperacionesProveedores {
        
        public OperacionesProveedoresClient() {
        }
        
        public OperacionesProveedoresClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperacionesProveedoresClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperacionesProveedoresClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperacionesProveedoresClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiciosObligatorioWCF.DTOProveedor[] RetornarProveedores() {
            return base.Channel.RetornarProveedores();
        }
        
        public System.Threading.Tasks.Task<ServiciosObligatorioWCF.DTOProveedor[]> RetornarProveedoresAsync() {
            return base.Channel.RetornarProveedoresAsync();
        }
        
        public ServiciosObligatorioWCF.DTOProveedor RetornarProveedorPorRut(string unRut) {
            return base.Channel.RetornarProveedorPorRut(unRut);
        }
        
        public System.Threading.Tasks.Task<ServiciosObligatorioWCF.DTOProveedor> RetornarProveedorPorRutAsync(string unRut) {
            return base.Channel.RetornarProveedorPorRutAsync(unRut);
        }
        
        public bool ModificarArancelesProveedor(double unArancel, double unPorcentajeVip) {
            return base.Channel.ModificarArancelesProveedor(unArancel, unPorcentajeVip);
        }
        
        public System.Threading.Tasks.Task<bool> ModificarArancelesProveedorAsync(double unArancel, double unPorcentajeVip) {
            return base.Channel.ModificarArancelesProveedorAsync(unArancel, unPorcentajeVip);
        }
    }
}
